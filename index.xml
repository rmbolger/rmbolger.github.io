<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adventures in Tech</title>
    <link>https://www.dvolve.net/</link>
    <description>Recent content on Adventures in Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 16 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.dvolve.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Workaround For AD PSDrive Bug In Server 2019</title>
      <link>https://www.dvolve.net/blog/2019/07/workaround-for-ad-psdrive-bug-in-server-2019/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.dvolve.net/blog/2019/07/workaround-for-ad-psdrive-bug-in-server-2019/</guid>
      <description>TL;DR Until Microsoft fixes the bug with the AD PSDrive provider, use the fully qualified PSPath to the object instead of the &amp;ldquo;AD:&amp;rdquo; PSDrive path like this:
$DN = (Get-ADUser jdoe).distinguishedName $objectPath = &amp;quot;Microsoft.ActiveDirectory.Management.dll\ActiveDirectory:://RootDSE/$DN&amp;quot; Get-Acl -Path $objectPath  The Story I was browsing r/PowerShell recently and came across a thread from someone who had run into a PowerShell bug after upgrading to Windows Server 2019 (1809). The user was attempting to run Get-Acl against an AD object using the object&amp;rsquo;s distinguished name like this:</description>
    </item>
    
    <item>
      <title>Infoblox and MS Management Permissions</title>
      <link>https://www.dvolve.net/blog/2019/06/infoblox-and-ms-management-permissions/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.dvolve.net/blog/2019/06/infoblox-and-ms-management-permissions/</guid>
      <description>The NIOS documentation lacks great instructions for granting least-privilege access to use the various MS Management components. As a former Active Directory admin, that bugs me because people get frustrated and end up giving service accounts Domain Admin permissions just to get things working. This post will lay out the necessary permissions for each component and provide PowerShell examples on how to apply them easily.
Warning: I&amp;rsquo;ve tested these permissions and examples against NIOS 8.</description>
    </item>
    
    <item>
      <title>Posh-ACME 3.5.0</title>
      <link>https://www.dvolve.net/blog/2019/06/posh-acme-3.5.0/</link>
      <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.dvolve.net/blog/2019/06/posh-acme-3.5.0/</guid>
      <description>Just shipped a new Posh-ACME release, version 3.5.0. This one has an important fix due to a recent change in Let&amp;rsquo;s Encrypt&amp;rsquo;s ACME implementation which now more strictly adheres to the recently finalized RFC 8555 spec. The Let&amp;rsquo;s Encrypt change is only on the staging server at the moment, but it will likely move to production soon and it breaks account creation on all previous versions of Posh-ACME.
Updated versions can be found in the PowerShell Gallery or GitHub.</description>
    </item>
    
    <item>
      <title>Posh-IBWAPI 3.0.0</title>
      <link>https://www.dvolve.net/blog/2019/04/posh-ibwapi-3.0.0/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.dvolve.net/blog/2019/04/posh-ibwapi-3.0.0/</guid>
      <description>Just shipped a new Posh-IBWAPI release, version 3.0.0. It has only been two days since 2.0.0, but I goofed and shipped 2.0.0 with some breaking changes that I ended up reverting. The biggest feature of the release is the new file upload/download wrappers, Send-IBFile and Recieve-IBFile. They allow you to more easily do things like upload a certificate or download a grid backup and fill a functionality gap that has been bugging me since 1.</description>
    </item>
    
  </channel>
</rss>